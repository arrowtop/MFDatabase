/*************************************************************************************************
 * CS 562 Project 
 * Author: Yujie Du(10372723), Chuanhui Zhang(10387654)
 * 
 * MFStructGenerator is the class to generate the MFStruct class
 * 
 *************************************************************************************************/

package imagineDragon;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class MFStructGenerator {
	
	private static String path;
	private Map<String, String> gaNameToTypeMap; //Map<Name, Type> of grouping attributes
	private Map<String, String> afNameToTypeMap; //Map<Name, Type> of aggregate functions
	private Map<String, String> initValueOfTypeMap; //Map<Type, initValue> of String, int, double and float
	
	public MFStructGenerator(String path, MFStructInfo mfsi){
		this.path = path;
		this.gaNameToTypeMap = mfsi.getGaNameToTypeMap();
		this.afNameToTypeMap = mfsi.getAfNameToTypeMap();
		//this.groupAttrMap = mfsi.getGroupAttrMap();
		this.initValueOfTypeMap = new HashMap<String, String>();
		
		initValueOfTypeMap.put("String", "\"\"");
		initValueOfTypeMap.put("String_min", "\"\"");
		initValueOfTypeMap.put("int", "Integer.MIN_VALUE");
		initValueOfTypeMap.put("int_min", "Integer.MAX_VALUE");
		initValueOfTypeMap.put("double", "Double.MIN_VALUE");
		initValueOfTypeMap.put("double_min", "Double.MAX_VALUE");
		initValueOfTypeMap.put("float", "Float.MIN_VALUE");
		initValueOfTypeMap.put("float_min", "Float.MAX_VALUE");
	}
	
	public void createMFStruct(){
		//StringBuffer's append() is faster than String concatenation
		//class header

		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		StringBuffer mfBuffer = new StringBuffer("/*************************************************************************************************\n");
		
		mfBuffer.append("* CS 562 Project\n");
		mfBuffer.append("* Author: Yujie Du(10372723), Chuanhui Zhang(10387654)\n");
		mfBuffer.append("*\n");
		mfBuffer.append("* This class is generated by MFStructGenerator.java, generated at ");
		mfBuffer.append(df.format(new Date()));
		mfBuffer.append("\n");
		mfBuffer.append("* It is required by MFMain class.\n");
		mfBuffer.append("*\n");
		mfBuffer.append("*************************************************************************************************/\n\n");				
		mfBuffer.append("package imagineDragon;\n\n");
		
		//class body
		mfBuffer.append("public class MFStruct { \n");
		for (Map.Entry<String, String> entry : gaNameToTypeMap.entrySet()) {
			//private variables
			mfBuffer.append("\t private ");
			mfBuffer.append(entry.getValue());
			mfBuffer.append(" ");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(";\n");
		}
		for (Map.Entry<String, String> entry : afNameToTypeMap.entrySet()) {
			mfBuffer.append("\t private ");
			mfBuffer.append(entry.getValue());
			mfBuffer.append(" ");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(";\n");
		}
		mfBuffer.append("\n");
		int count = gaNameToTypeMap.size(); // used to measure the number of ','
		
		//MFStruct constructor
		mfBuffer.append("\t public MFStruct(");
		for (Map.Entry<String, String> entry : gaNameToTypeMap.entrySet()) {
			mfBuffer.append(entry.getValue());
			mfBuffer.append(" ");
			mfBuffer.append(entry.getKey());
			if(--count != 0) mfBuffer.append(", ");
			else mfBuffer.append(") {\n");
		}
		
		//private variables
		for (Map.Entry<String, String> entry : gaNameToTypeMap.entrySet()) {
			mfBuffer.append("\t\tthis.");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(" = ");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(";\n");
		}
		for (Map.Entry<String, String> entry : afNameToTypeMap.entrySet()) {
			mfBuffer.append("\t\tthis.");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(" = ");
			if(entry.getKey().contains("min")) 	mfBuffer.append(initValueOfTypeMap.get(entry.getValue()+"_min"));
			else mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
			mfBuffer.append(";\n");
		}
		mfBuffer.append("\t}\n\n");
		
		//getter methods for grouping attributes
		for (Map.Entry<String, String> entry : gaNameToTypeMap.entrySet()) {
			mfBuffer.append("\t public ");
			mfBuffer.append(entry.getValue());
			mfBuffer.append(" get_");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(" () {\n");
			mfBuffer.append("\t\t return ");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(";\n");
			mfBuffer.append("\t}\n");
			mfBuffer.append("\n");
		}
		
		for (Map.Entry<String, String> entry : afNameToTypeMap.entrySet()) {
			//getter methods for aggregate functions
			mfBuffer.append("\t public "); 
			mfBuffer.append(entry.getValue());
			mfBuffer.append(" get_");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(" () {\n");
			if(entry.getKey().contains("avg")) {
				mfBuffer.append("\t\tif(");
				if(!afNameToTypeMap.get(entry.getKey()).equals("String")) {
					mfBuffer.append("this.");
					mfBuffer.append(entry.getKey().replace("avg", "count"));
					mfBuffer.append(" != ");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
				} else {
					mfBuffer.append("!this.");
					mfBuffer.append(entry.getKey().replace("avg", "count"));
					mfBuffer.append(".equals(");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
					mfBuffer.append(")");
				}
				mfBuffer.append(") ");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = ");
				mfBuffer.append(entry.getKey().replace("avg","sum"));
				mfBuffer.append("/");
				mfBuffer.append(entry.getKey().replace("avg","count"));
				mfBuffer.append(";\n");
			}
			mfBuffer.append("\t\t return ");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(";\n");
			mfBuffer.append("\t}\n");
			mfBuffer.append("\n");
			
			//setter methods for aggregate functions
			mfBuffer.append("\t public void");
			mfBuffer.append(" set_");
			mfBuffer.append(entry.getKey());
			mfBuffer.append(" (");
			if(!entry.getKey().contains("count")) {
				mfBuffer.append(entry.getValue()); 
			} else {
				mfBuffer.append("Object"); 
			}
			mfBuffer.append(" value ");
			mfBuffer.append(") {\n");
			if(entry.getKey().contains("sum")) {
				mfBuffer.append("\t\tif(this.");
				mfBuffer.append(entry.getKey());
				if(!afNameToTypeMap.get(entry.getKey()).equals("String")) {
					mfBuffer.append(" == ");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
				} else {
					mfBuffer.append(".equals(");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
					mfBuffer.append(")");
				}
				mfBuffer.append(") this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = value");
				mfBuffer.append(";\n");
				mfBuffer.append("\t\t else this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" += value");
				mfBuffer.append(";\n");
			}
			else if(entry.getKey().contains("count")) {
				mfBuffer.append("\t\tif(this.");
				mfBuffer.append(entry.getKey());
				if(!afNameToTypeMap.get(entry.getKey()).equals("String")) {
					mfBuffer.append(" == ");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
				} else {
					mfBuffer.append(".equals(");
					mfBuffer.append(initValueOfTypeMap.get(entry.getValue()));
					mfBuffer.append(")");
				}
				mfBuffer.append(") this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = 1");
				mfBuffer.append(";\n");
				mfBuffer.append("\t\telse this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" ++;\n");
			}
			else if(entry.getKey().contains("max")){
				mfBuffer.append("\t\tif(this.");
				mfBuffer.append(entry.getKey());
				if(!afNameToTypeMap.get(entry.getKey()).equals("String")) {
					mfBuffer.append(" < value");
				} else {
					mfBuffer.append(".compareTo(value) < 0 || this.");
					mfBuffer.append(entry.getKey());
					mfBuffer.append(".equals(\"\")");
				}
				mfBuffer.append(") this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = value");
				mfBuffer.append(";\n");
			}
			else if(entry.getKey().contains("min")){
				mfBuffer.append("\t\tif(this.");
				mfBuffer.append(entry.getKey());
				if(!afNameToTypeMap.get(entry.getKey()).equals("String")) {
					mfBuffer.append(" > value");
				} else {
					mfBuffer.append(".compareTo(value) > 0 || this.");
					mfBuffer.append(entry.getKey());
					mfBuffer.append(".equals(\"\")");
				}
				mfBuffer.append(") this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = value");
				mfBuffer.append(";\n");
			}
			else {
				mfBuffer.append("\t\t this.");
				mfBuffer.append(entry.getKey());
				mfBuffer.append(" = value");
				mfBuffer.append(";\n");
			}
			mfBuffer.append("\t}\n\n");
	    }
		mfBuffer.append("}");
		try
		{
			PrintWriter pwoutMain = new PrintWriter(new FileWriter(path + "/MFStruct.java"));
			pwoutMain.print(mfBuffer.toString());
			pwoutMain.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
